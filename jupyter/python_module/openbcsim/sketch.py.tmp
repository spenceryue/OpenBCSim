#!/usr/bin/env python

from pathlib import Path
import weakref

class BuildStep:
  steps_dict = {}
  def __init__ (self, label: str, in_files : [], out : Path, command : [] or str,
    build_dir : Path=None, logs_dir : Path=None, in_flag : str=None,
    out_flag : str=None, dependencies : [BuildStep] or ['label',...]=None):
    self.label = label
    self.in_files = in_files
    self.out = Path (out)
    self.command = command if isinstance (command, list) else [command]
    self.build_dir = build_dir or Path ()
    self.logs_dir = logs_dir or Path ()
    self.in_flag = in_flag or ''
    self.out_flag = out_flag or ''
    self.dependencies = dependencies or []
    if label in steps_dict:
      raise ValueError (f'Label "{label}" is not unique!')
    else:
      steps_dict[label] = weakref.ref (self)
  def __del__ (self):
    steps_dict.pop (self.label)
  def needs_building (self, *files, enable=True, build_dict=None, silent=False):
    if needs_building.first:
        needs_building.first = False
        print ()
    if not enable:
      return {}
    if not build_dict:
      build_dict = {}
    for file in files:
      source = Path (file)
      if source in build_dict:
        continue
      suffix = source.resolve ().suffix + '.timestamp'
      timestamp_file = LOGS_DIR / source.resolve ().with_suffix (suffix).name
      timestamp = modified = None
      if source.exists ():
        modified = source.stat ().st_mtime
      if timestamp_file.exists ():
        timestamp = float (timestamp_file.read_text ())
        if timestamp != modified or args.force:
          format_msg (source, modified, timestamp, args.force, args.show_ts, silent)
          build_dict[source] = timestamp_file
        elif args.show_ts:
          format_msg (source, modified, timestamp, args.force, args.show_ts, silent,
              msg_head='  Timestamp only:  '
            )
      else:
        format_msg (source, modified, timestamp, True, args.show_ts)
        build_dict[source] = timestamp_file
    return build_dict
  needs_building.first = True